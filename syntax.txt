#Non Terminals
Goal ::= MainClass
#Goal ::= Goal ClassDeclaration
#MainClass ::= class Identifier { public static void main ( String [ ] Identifier ) { Statement } }
MainClass ::= class Identifier { public static void main ( String [ ] Identifier ) { Statement } }

#ClassDeclaration ::= class Identifier { ClassBody }
#ClassDeclaration ::= class Identifier extends Identifier { ClassBody }

#ClassBody ::= VarDeclarations
#ClassBody ::= MethodDeclarations
#ClassBody ::= VarDeclarations MethodDeclarations
#
#VarDeclaratoins ::= VarDeclaration
#VarDeclarations ::= VarDeclarations VarDeclaration
#VarDeclaration ::= Type Identifier ;
#
#MethodDeclarations ::= MethodDeclaration
#MethodDeclarations ::= MethodDeclarations MethodDeclaration
#MethodDeclaration ::= public Type Identifier ( ) { Block return Expression ; }
#MethodDeclaration ::= public Type Identifier ( ParameterDeclarations ) { Block return Expression ; }
#
#Block ::= VarDeclarations
#Block ::= Statements
#Block ::= VarDeclarations Statements
#
#ParameterDeclarations ::= ParameterDeclaration
#ParameterDeclarations ::= ParameterDeclarations , ParameterDeclaration
#ParameterDeclaration ::= Type Identifier
#
#Type ::= int
#Type ::= int [ ]
#Type ::= boolean
#Type ::= Identifier

#
#TODO: The current parsing algorithm can't deal with the COOPERATIVE
# recursive defined rules like the Statements and the Statement here.
# Recursive definitation can only be presented in the same line.
#   See Algorithm.java LINE 166 for details.
#   ...if (rule.getLhs() != token) {...
# What should we do?
#
#Statements ::= Statement
#Statements ::= Statements Statement
#Statement ::= { Statements }

#Statement ::= { Statement }
#Statement ::= Statement Statement
#Statement ::= if ( Expression ) Statement else Statement
#Statement ::= while ( Expression ) Statement
Statement ::= System.out.println ( Expression ) ;
Statement ::= Identifier = Expression ;
Statement ::= Identifier [ Expression ] = Expression ;

#Expression ::= Expression && Expression
#Expression ::= Expression < Expression
#Expression ::= Expression + Expression
#Expression ::= Expression - Expression
#Expression ::= Expression * Expression
Expression ::= ! Expression
Expression ::= ( Expression )
Expression ::= Expression [ Expression ]
Expression ::= Expression . length
Expression ::= Expression . Identifier ( Parameters )

Expression ::= Integer
Expression ::= true
Expression ::= false
Expression ::= Identifier
Expression ::= this
Expression ::= new int [ Expression ]
Expression ::= new Identifier ( )

Parameters ::= Expression
Parameters ::= Parameters , Expression

#Terminals
#{ ::= LBRACE
#} ::= RBRACE
#[ ::= LBRACKET
#] ::= RBRACKET
#( ::= LP
#) ::= RP
#; ::= Semicolon
#System.out.println ::= PRINT
